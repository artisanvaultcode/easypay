---
# Ansible Playbook: Provision EC2 Instances for Kubernetes Cluster
# File: ansible/playbooks/provision-ec2.yml

- name: Provision and Configure EC2 Instances
  hosts: cluster
  become: yes
  gather_facts: yes
  
  vars:
    kubernetes_version: "1.28"
    docker_version: "24.0"
    pod_network_cidr: "10.244.0.0/16"
  
  pre_tasks:
    - name: Update apt cache
      apt:
        update_cache: yes
        cache_valid_time: 3600
      
    - name: Upgrade all packages
      apt:
        upgrade: dist
        autoremove: yes
        autoclean: yes
  
  tasks:
    - name: Set hostname
      hostname:
        name: "{{ inventory_hostname }}"
    
    - name: Update /etc/hosts
      lineinfile:
        path: /etc/hosts
        line: "{{ hostvars[item].ansible_host }} {{ item }}"
        state: present
      loop: "{{ groups['cluster'] }}"
    
    - name: Install required packages
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
          - software-properties-common
          - python3-pip
          - git
          - wget
          - vim
          - net-tools
        state: present
    
    - name: Disable swap permanently
      shell: |
        swapoff -a
        sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab
      args:
        warn: false
    
    - name: Load kernel modules
      community.general.modprobe:
        name: "{{ item }}"
        state: present
      loop:
        - overlay
        - br_netfilter
    
    - name: Make kernel modules persistent
      copy:
        content: |
          overlay
          br_netfilter
        dest: /etc/modules-load.d/k8s.conf
    
    - name: Configure sysctl parameters
      sysctl:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        state: present
        reload: yes
        sysctl_file: /etc/sysctl.d/k8s.conf
      loop:
        - { name: 'net.bridge.bridge-nf-call-iptables', value: '1' }
        - { name: 'net.bridge.bridge-nf-call-ip6tables', value: '1' }
        - { name: 'net.ipv4.ip_forward', value: '1' }
    
    - name: Install Docker dependencies
      apt:
        name:
          - ca-certificates
          - curl
          - gnupg
        state: present
    
    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present
        keyring: /etc/apt/keyrings/docker.gpg
    
    - name: Add Docker repository
      apt_repository:
        repo: "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present
        filename: docker
    
    - name: Install Docker
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present
        update_cache: yes
    
    - name: Create Docker daemon configuration
      copy:
        content: |
          {
            "exec-opts": ["native.cgroupdriver=systemd"],
            "log-driver": "json-file",
            "log-opts": {
              "max-size": "100m"
            },
            "storage-driver": "overlay2"
          }
        dest: /etc/docker/daemon.json
    
    - name: Create Docker service directory
      file:
        path: /etc/systemd/system/docker.service.d
        state: directory
    
    - name: Reload systemd daemon
      systemd:
        daemon_reload: yes
    
    - name: Enable and start Docker
      systemd:
        name: docker
        enabled: yes
        state: started
    
    - name: Add ubuntu user to docker group
      user:
        name: ubuntu
        groups: docker
        append: yes
    
    - name: Add Kubernetes GPG key
      apt_key:
        url: https://pkgs.k8s.io/core:/stable:/v{{ kubernetes_version }}/deb/Release.key
        state: present
        keyring: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
    
    - name: Add Kubernetes repository
      apt_repository:
        repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v{{ kubernetes_version }}/deb/ /"
        state: present
        filename: kubernetes
    
    - name: Install Kubernetes components
      apt:
        name:
          - kubelet
          - kubeadm
          - kubectl
        state: present
        update_cache: yes
    
    - name: Hold Kubernetes packages
      dpkg_selections:
        name: "{{ item }}"
        selection: hold
      loop:
        - kubelet
        - kubeadm
        - kubectl
    
    - name: Enable kubelet service
      systemd:
        name: kubelet
        enabled: yes
    
    - name: Pull Kubernetes images
      command: kubeadm config images pull
      when: inventory_hostname in groups['masters']

- name: Initialize Kubernetes Master
  hosts: masters
  become: yes
  tasks:
    - name: Check if cluster is already initialized
      stat:
        path: /etc/kubernetes/admin.conf
      register: kubeadm_init
    
    - name: Initialize Kubernetes cluster
      command: >
        kubeadm init
        --pod-network-cidr={{ pod_network_cidr }}
        --apiserver-advertise-address={{ ansible_host }}
        --control-plane-endpoint={{ ansible_host }}
      when: not kubeadm_init.stat.exists
      register: kubeadm_init_result
    
    - name: Create .kube directory
      file:
        path: /home/ubuntu/.kube
        state: directory
        owner: ubuntu
        group: ubuntu
        mode: '0755'
    
    - name: Copy kubeconfig to ubuntu user
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /home/ubuntu/.kube/config
        owner: ubuntu
        group: ubuntu
        mode: '0600'
        remote_src: yes
    
    - name: Install Calico network plugin
      become_user: ubuntu
      shell: |
        kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.26.1/manifests/calico.yaml
      args:
        executable: /bin/bash
    
    - name: Generate join command
      command: kubeadm token create --print-join-command
      register: join_command
    
    - name: Save join command to file
      copy:
        content: "{{ join_command.stdout }}"
        dest: /tmp/kubeadm_join_command.sh
        mode: '0755'
    
    - name: Fetch join command to local
      fetch:
        src: /tmp/kubeadm_join_command.sh
        dest: /tmp/kubeadm_join_command.sh
        flat: yes

- name: Join Worker Nodes
  hosts: workers
  become: yes
  tasks:
    - name: Check if node is already joined
      stat:
        path: /etc/kubernetes/kubelet.conf
      register: kubelet_conf
    
    - name: Copy join command to workers
      copy:
        src: /tmp/kubeadm_join_command.sh
        dest: /tmp/kubeadm_join_command.sh
        mode: '0755'
      when: not kubelet_conf.stat.exists
    
    - name: Join worker to cluster
      command: /tmp/kubeadm_join_command.sh
      when: not kubelet_conf.stat.exists
    
    - name: Wait for node to be ready
      pause:
        seconds: 30

- name: Post-configuration tasks
  hosts: masters
  become_user: ubuntu
  tasks:
    - name: Label worker nodes
      command: kubectl label node {{ item }} node-role.kubernetes.io/worker=worker
      loop: "{{ groups['workers'] }}"
      ignore_errors: yes
    
    - name: Wait for all nodes to be ready
      command: kubectl wait --for=condition=Ready nodes --all --timeout=300s
    
    - name: Get cluster status
      command: kubectl get nodes -o wide
      register: cluster_status
    
    - name: Display cluster status
      debug:
        var: cluster_status.stdout_lines
